@use "sass:map";
@use "sass:meta";
@use "variables";
@use "../../stylesheets/breakpoint";


@mixin breakpoint-test-query($mq) {
    $bkpt: breakpoint.breakpoint($mq);
    _query: meta.inspect(map.get($bkpt, "query"));
    _fallback: meta.inspect(map.get($bkpt, "fallback"));
    _context-holder: meta.inspect(map.get($bkpt, "context holder"));
    _query-count: meta.inspect(map.get($bkpt, "query count"));
}

@mixin breakpoint-test-context($mq, $contexts) {
    $bkpt: breakpoint.breakpoint($mq, $contexts);
    @each $k, $v in $bkpt {
        _#{$k}: meta.inspect($v);
    }
}

/**
  * Breakpoint Function
  * - Returns either a map of the query, fallback, context, and query count or a map of context values
**/
.query {
    /* Single Pixel Value */
    _test: "breakpoint(#{variables.$single-pixel-value})";
    @include breakpoint-test-query(variables.$single-pixel-value);
    /* Fenced with Media */
    _test: "breakpoint(#{variables.$media-not-plus-fenced})";
    @include breakpoint-test-query(variables.$media-not-plus-fenced);
    /* Or Query */
    _test: "breakpoint(#{variables.$dynamic-context})";
    @include breakpoint-test-query(variables.$dynamic-context);
    /* No Query */
    _test: "breakpoint(#{variables.$no-query})";
    @include breakpoint-test-query(variables.$no-query);
    /* No Query, Or */
    _test: "breakpoint(#{variables.$legacy})";
    @include breakpoint-test-query(variables.$legacy);
}

.context {
    /* Single Pixel Value */
    _test: "breakpoint(#{variables.$single-pixel-value}, 'min-width')";
    $bkpt: breakpoint.breakpoint(variables.$single-pixel-value, "min-width", "height", "no-query");
    $contexts: map.get($bkpt, "context");
    @each $k, $v in $contexts {
        _#{$k}: meta.inspect($v);
    }
    /* Fenced with Media */
    _test: "breakpoint(#{variables.$media-not-plus-fenced}, 'min-width', 'max-width', 'media')";
    $bkpt: breakpoint.breakpoint(
        variables.$media-not-plus-fenced,
        "min-width",
        "max-width",
        "media"
    );
    $contexts: map.get($bkpt, "context");
    @each $k, $v in $contexts {
        _#{$k}: meta.inspect($v);
    }
    /* Or Query */
    _test: "breakpoint(#{variables.$dynamic-context})";
    $bkpt: breakpoint.breakpoint(
        variables.$dynamic-context,
        "min-width",
        "min-height",
        "orientation",
        "no-query"
    );
    $contexts: map.get($bkpt, "context");
    @each $k, $v in $contexts {
        _#{$k}: meta.inspect($v);
    }
    /* No Query */
    _test: "breakpoint(#{variables.$no-query})";
    $bkpt: breakpoint.breakpoint(variables.$no-query, "min-width", "media", "no-query");
    $contexts: map.get($bkpt, "context");
    @each $k, $v in $contexts {
        _#{$k}: meta.inspect($v);
    }
    /* No Query, Or */
    _test: "breakpoint(#{variables.$legacy})";
    $bkpt: breakpoint.breakpoint(variables.$legacy, "min-width", "media", "no-query");
    $contexts: map.get($bkpt, "context");
    @each $k, $v in $contexts {
        _#{$k}: meta.inspect($v);
    }
}
